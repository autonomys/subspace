# This action enables building container images and executables for farmer and node, can be triggered manually or by
# release creation.
#
# Container images are only pushed to GitHub Container Registry for releases.
# Executables are built both for releases and for manually triggered runs, uploaded to artifacts and assets.
name: Snapshot build

on:
  workflow_dispatch:
  push:
    tags:
      - 'snapshot-*'
      - 'gemini-*'

# Incremental compilation here isn't helpful
env:
  CARGO_INCREMENTAL: 0

jobs:
  container-linux:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      packages: write
    strategy:
      matrix:
        image:
          - farmer
          - node
        platform:
          - arch: linux/amd64
            profile: production
            suffix: ubuntu-x86_64-${{ github.ref_name }}
            image-suffix: ''
          - arch: linux/arm64
            # Build at least something for aarch64 that doesn't exceed CI's time limit
            profile: dev
            suffix: ubuntu-aarch64-${{ github.ref_name }}
            image-suffix: '-aarch64'

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log into registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}
          tags: |
            type=ref,event=tag
          flavor: |
            latest=false
            suffix=${{ matrix.platform.image-suffix }}

      - name: Build and push ${{ matrix.image }} image
        id: build
        uses: docker/build-push-action@v2
        with:
          file: Dockerfile-${{ matrix.image }}
          platforms: ${{ matrix.platform.arch }}
          # Only push for releases
          push: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SUBSTRATE_CLI_GIT_COMMIT_HASH=${{ github.sha }}
            PROFILE=${{ matrix.platform.profile }}
            RUSTFLAGS=-C strip=debuginfo

      - name: Extract executable from container image (aarch64)
        # Using `steps.meta.outputs.tags` instead of `steps.build.outputs.digest` because of https://github.com/docker/build-push-action/issues/321
        run: |
          docker run --rm -u root --platform ${{ matrix.platform.arch }} --entrypoint /bin/cat ${{ steps.meta.outputs.tags }} /subspace-${{ matrix.image }} > subspace-${{ matrix.image }}-${{ matrix.platform.suffix }}
        if: matrix.platform.arch == 'linux/arm64'

      - name: Upload executable to artifacts (aarch64)
        uses: actions/upload-artifact@v2
        with:
          name: executables
          path: |
            subspace-${{ matrix.image }}-${{ matrix.platform.suffix }}
          if-no-files-found: error
        if: matrix.platform.arch == 'linux/arm64'

      - name: Upload executable to assets (aarch64)
        uses: alexellis/upload-assets@0.3.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '["subspace-${{ matrix.image }}-${{ matrix.platform.suffix }}"]'
        if: matrix.platform.arch == 'linux/arm64' && github.event_name == 'push' && github.ref_type == 'tag'

  executables:
    strategy:
      matrix:
        build:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            suffix: ubuntu-x86_64-${{ github.ref_name }}
          - os: macos-12
            target: x86_64-apple-darwin
            suffix: macos-x86_64-${{ github.ref_name }}
          - os: macos-12
            target: aarch64-apple-darwin
            suffix: macos-aarch64-${{ github.ref_name }}
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            suffix: windows-x86_64-${{ github.ref_name }}
    runs-on: ${{ matrix.build.os }}
    env:
      PRODUCTION_TARGET: target/${{ matrix.build.target }}/production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # For sloth256-189 Wasm support we need `llvm-ar`, which is not available by default
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "14.0"

      - name: Rust toolchain (${{ matrix.build.target }})
        uses: actions-rs/toolchain@v1
        # TODO: Below can be removed when https://github.com/actions-rs/toolchain/issues/126 is resolved
        with:
          toolchain: nightly-2022-05-16
          target: ${{ matrix.build.target }}
          override: true

      - name: Rust toolchain (wasm32)
        uses: actions-rs/toolchain@v1
        # TODO: Below can be removed when https://github.com/actions-rs/toolchain/issues/126 is resolved
        with:
          toolchain: nightly-2022-05-16
          target: wasm32-unknown-unknown

      # Workaround to resolve link error with C:\msys64\mingw64\bin\libclang.dll
      - name: Remove msys64
        run: Remove-Item -LiteralPath "C:\msys64\" -Force -Recurse
        if: runner.os == 'Windows'

      - name: CUDA toolchain
        uses: Jimver/cuda-toolkit@v0.2.6
        if: runner.os == 'Linux' || runner.os == 'Windows'

      - name: OpenCL
        run: sudo apt-get install -y ocl-icd-opencl-dev
        if: runner.os == 'Linux'

      - name: Build (Linux or Windows with OpenCL)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.build.target }} --profile production --bin subspace-node --bin subspace-farmer --features=subspace-farmer/opencl
        if: runner.os == 'Linux' || runner.os == 'Windows'

      - name: Build (macOS without OpenCL)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.build.target }} --profile production --bin subspace-node --bin subspace-farmer
        if: runner.os == 'macOS'

      - name: Sign Application (macOS)
        run: |
          echo "Importing certificate"
          echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > certificate.p12
          security create-keychain -p "${{ secrets.MACOS_CERTIFICATE_PW }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.MACOS_CERTIFICATE_PW }}" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.MACOS_CERTIFICATE_PW }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.MACOS_CERTIFICATE_PW }}" build.keychain
          echo "Signing farmer"
          codesign --force --options=runtime --entitlements .github/workflows/Entitlements.plist -s "${{ secrets.MACOS_IDENTITY }}" --timestamp ${{ env.PRODUCTION_TARGET }}/subspace-farmer
          echo "Signing node"
          codesign --force --options=runtime --entitlements .github/workflows/Entitlements.plist -s "${{ secrets.MACOS_IDENTITY }}" --timestamp ${{ env.PRODUCTION_TARGET }}/subspace-node
          echo "Creating an archive"
          mkdir ${{ env.PRODUCTION_TARGET }}/macos-binaries
          cp ${{ env.PRODUCTION_TARGET }}/subspace-farmer ${{ env.PRODUCTION_TARGET }}/subspace-node ${{ env.PRODUCTION_TARGET }}/macos-binaries
          ditto -c -k --rsrc ${{ env.PRODUCTION_TARGET }}/macos-binaries subspace-binaries.zip
          echo "Notarizing"
          xcrun altool --notarize-app --primary-bundle-id binaries-${{ github.ref_name }} --username "${{ secrets.MACOS_APPLE_ID}}" --password "${{ secrets.MACOS_APP_PW }}" --file subspace-binaries.zip
          # TODO: Wait for notarization before stapling
          # echo "Stapling farmer"
          # xcrun stapler staple ${{ env.PRODUCTION_TARGET }}/subspace-farmer
          # echo "Stapling node"
          # xcrun stapler staple ${{ env.PRODUCTION_TARGET }}/subspace-node
          echo "Done!"
        # Allow code signing to fail on non-release builds and in non-subspace repos (forks)
        continue-on-error: ${{ github.github.repository_owner != 'subspace' || github.event_name != 'push' || github.ref_type != 'tag' }}
        if: runner.os == 'macOS'

      - name: Sign Application (Windows)
        uses: skymatic/code-sign-action@v1.1.0
        with:
          certificate: '${{ secrets.WINDOWS_CERTIFICATE }}'
          password: '${{ secrets.WINDOWS_CERTIFICATE_PW }}'
          certificatesha1: '00A427587B911908F59B6C42BA2863109C599C1C'
          folder: '${{ env.PRODUCTION_TARGET }}'
        # Allow code signing to fail on non-release builds and in non-subspace repos (forks)
        continue-on-error: ${{ github.github.repository_owner != 'subspace' || github.event_name != 'push' || github.ref_type != 'tag' }}
        if: runner.os == 'Windows'

      - name: Prepare executables for uploading (Ubuntu)
        run: |
          mkdir executables
          mv ${{ env.PRODUCTION_TARGET }}/subspace-farmer executables/subspace-farmer-${{ matrix.build.suffix }}
          mv ${{ env.PRODUCTION_TARGET }}/subspace-node executables/subspace-node-${{ matrix.build.suffix }}
        if: runner.os == 'Linux'

      - name: Prepare executables for uploading (macOS)
        run: |
          mkdir executables
          mv ${{ env.PRODUCTION_TARGET }}/subspace-farmer executables/subspace-farmer-${{ matrix.build.suffix }}
          mv ${{ env.PRODUCTION_TARGET }}/subspace-node executables/subspace-node-${{ matrix.build.suffix }}
          # Zip it so that signature is not lost
          ditto -c -k --rsrc executables/subspace-farmer-${{ matrix.build.suffix }} executables/subspace-farmer-${{ matrix.build.suffix }}.zip
          ditto -c -k --rsrc executables/subspace-node-${{ matrix.build.suffix }} executables/subspace-node-${{ matrix.build.suffix }}.zip
          rm executables/subspace-farmer-${{ matrix.build.suffix }}
          rm executables/subspace-node-${{ matrix.build.suffix }}
        if: runner.os == 'macOS'

      - name: Prepare executables for uploading (Windows)
        run: |
          mkdir executables
          move ${{ env.PRODUCTION_TARGET }}/subspace-farmer.exe executables/subspace-farmer-${{ matrix.build.suffix }}.exe
          move ${{ env.PRODUCTION_TARGET }}/subspace-node.exe executables/subspace-node-${{ matrix.build.suffix }}.exe
        if: runner.os == 'Windows'

      - name: Upload node and farmer executables to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: executables-${{ matrix.build.suffix }}
          path: |
            executables/*
          if-no-files-found: error

      - name: Upload node and farmer executables to assets
        uses: alexellis/upload-assets@0.3.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '["executables/*"]'
        if: github.event_name == 'push' && github.ref_type == 'tag'
