name: Rust

on:
  push:
    paths-ignore:
      - '**.md'
      - '.github/CODEOWNERS'
  pull_request:
    paths-ignore:
      - '**.md'
      - '.github/CODEOWNERS'

env:
  # Not needed in CI, should make things a bit faster
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  # Build smaller artifacts to avoid running out of space in CI
  RUSTFLAGS: -C strip=debuginfo

jobs:
  cargo-fmt:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Rust toolchain
        uses: actions-rs/toolchain@v1
        # TODO: Below can be removed when https://github.com/actions-rs/toolchain/issues/126 is resolved
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown
          override: true
          components: rustfmt, clippy

      - name: Configure cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}

      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  cargo-clippy:
    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - macos-11
          - windows-2022

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Workaround as the newest version of MSVC does not support this latest version of CUDA, workaround for Windows 11/Windows Server 2022.
      - name: Add MSVC compiler
        uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.29
        if: matrix.os == 'windows-2022'

      - name: Rust toolchain
        uses: actions-rs/toolchain@v1
        # TODO: Below can be removed when https://github.com/actions-rs/toolchain/issues/126 is resolved
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown
          override: true
          components: rustfmt, clippy

      # Workaround to resolve link error with C:\msys64\mingw64\bin\libclang.dll
      - name: Remove msys64
        run: Remove-Item -LiteralPath "C:\msys64\" -Force -Recurse
        if: runner.os == 'Windows'

      - name: CUDA toolchain
        uses: Jimver/cuda-toolkit@v0.2.5
        if: runner.os != 'macOS'

      - name: Configure cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}

      - name: cargo clippy (Linux or Windows with CUDA)
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --features=subspace-farmer/cuda -- -D warnings
        if: runner.os != 'macOS'

      - name: cargo clippy (macOS)
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -- -D warnings
        if: runner.os == 'macOS'

  cargo-test:
    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - macos-11
          - windows-2022

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Workaround as the newest version of MSVC does not support this latest version of CUDA, workaround for Windows 11/Windows Server 2022.
      - name: Add MSVC compiler
        uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.29
        if: matrix.os == 'windows-2022'

      - name: Rust toolchain
        uses: actions-rs/toolchain@v1
        # TODO: Below can be removed when https://github.com/actions-rs/toolchain/issues/126 is resolved
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown
          override: true
          components: rustfmt, clippy

      # Workaround to resolve link error with C:\msys64\mingw64\bin\libclang.dll
      - name: Remove msys64
        run: Remove-Item -LiteralPath "C:\msys64\" -Force -Recurse
        if: runner.os == 'Windows'

      - name: Configure cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}

      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
