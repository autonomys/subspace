
//! Autogenerated weights for `pallet_rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-09-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `protocol-team-testing`, CPU: `AMD Ryzen 5 3600 6-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/production/subspace-node
// benchmark
// pallet
// --runtime=./target/production/wbuild/subspace-runtime/subspace_runtime.compact.compressed.wasm
// --extrinsic=*
// --wasm-execution=compiled
// --genesis-builder=none
// --heap-pages=4096
// --steps=50
// --repeat=20
// --pallet=pallet_rewards
// --output=./crates/subspace-runtime/src/weights/pallet_rewards.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_rewards`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_rewards::WeightInfo for WeightInfo<T> {
	/// Storage: `Rewards::ProposerSubsidyPoints` (r:0 w:1)
	/// Proof: `Rewards::ProposerSubsidyPoints` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `Rewards::VoterSubsidyPoints` (r:0 w:1)
	/// Proof: `Rewards::VoterSubsidyPoints` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[0, 20]`.
	/// The range of component `v` is `[0, 20]`.
	fn update_issuance_params(p: u32, v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_750_000 picoseconds.
		Weight::from_parts(2_896_895, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 486
			.saturating_add(Weight::from_parts(9_931, 0).saturating_mul(p.into()))
			// Standard Error: 486
			.saturating_add(Weight::from_parts(4_206, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
