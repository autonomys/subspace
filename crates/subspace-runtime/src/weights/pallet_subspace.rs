
//! Autogenerated weights for `pallet_subspace`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-09-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `protocol-team-testing`, CPU: `AMD Ryzen 5 3600 6-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/production/subspace-node
// benchmark
// pallet
// --runtime=./target/production/wbuild/subspace-runtime/subspace_runtime.compact.compressed.wasm
// --extrinsic=*
// --wasm-execution=compiled
// --genesis-builder=none
// --heap-pages=4096
// --steps=50
// --repeat=20
// --pallet=pallet_subspace
// --output=./crates/subspace-runtime/src/weights/pallet_subspace.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_subspace`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_subspace::WeightInfo for WeightInfo<T> {
	/// Storage: `Subspace::DidProcessSegmentHeaders` (r:1 w:1)
	/// Proof: `Subspace::DidProcessSegmentHeaders` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subspace::SegmentCommitment` (r:20 w:20)
	/// Proof: `Subspace::SegmentCommitment` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subspace::CounterForSegmentCommitment` (r:1 w:1)
	/// Proof: `Subspace::CounterForSegmentCommitment` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 20]`.
	fn store_segment_headers(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1489 + x * (2475 Â±0)`
		// Minimum execution time: 9_290_000 picoseconds.
		Weight::from_parts(4_660_743, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			// Standard Error: 4_058
			.saturating_add(Weight::from_parts(4_740_893, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(x.into()))
	}
	/// Storage: `Subspace::ShouldAdjustSolutionRange` (r:1 w:1)
	/// Proof: `Subspace::ShouldAdjustSolutionRange` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subspace::SolutionRanges` (r:1 w:1)
	/// Proof: `Subspace::SolutionRanges` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subspace::NextSolutionRangeOverride` (r:0 w:1)
	/// Proof: `Subspace::NextSolutionRangeOverride` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn enable_solution_range_adjustment() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 6_100_000 picoseconds.
		Weight::from_parts(6_249_000, 0)
			.saturating_add(Weight::from_parts(0, 1485))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_509_000 picoseconds.
		Weight::from_parts(4_660_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Subspace::EnableRewards` (r:0 w:1)
	/// Proof: `Subspace::EnableRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn enable_rewards_at() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_340_000 picoseconds.
		Weight::from_parts(2_419_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Subspace::RootPlotPublicKey` (r:1 w:0)
	/// Proof: `Subspace::RootPlotPublicKey` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subspace::AllowAuthoringByAnyone` (r:0 w:1)
	/// Proof: `Subspace::AllowAuthoringByAnyone` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn enable_authoring_by_anyone() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 3_870_000 picoseconds.
		Weight::from_parts(3_990_000, 0)
			.saturating_add(Weight::from_parts(0, 1485))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Subspace::PotSlotIterations` (r:1 w:1)
	/// Proof: `Subspace::PotSlotIterations` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_pot_slot_iterations() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 3_590_000 picoseconds.
		Weight::from_parts(3_730_000, 0)
			.saturating_add(Weight::from_parts(0, 1485))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
