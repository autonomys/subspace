searchState.loadedDescShard("subspace_networking", 0, "Networking functionality of Subspace Network, primarily …\nCan’t preallocate known peers file, probably not enough …\n<code>Node</code> configuration.\nErrors that might happen during network creation.\nKademlia mode will be changed using Autonat protocol when …\nDefines errors for <code>get-closest-peers</code> operation.\nUnderlying protocol returned an incorrect format, …\nI/O error.\nI/O error.\nDefines Kademlia mode\nHelper structure. It wraps Kademlia distance to a given …\nHandles networking parameters. It manages network …\nConfiguration for <code>KnownPeersManager</code>.\nNetworking parameters persistence errors.\nDefines operations with the networking parameters.\nImplementation of a network node on Subspace Network.\nRunner for the Node.\nNode runner was dropped\nNode runner was dropped\nNode runner was dropped\nDefines the event triggered when the peer address is …\nRepresents Kademlia events (RoutablePeer, …\nUnderlying protocol returned an error, impossible to get …\nCircuit relay client error.\nKademlia’s routable or pending routable peer event.\nFailed to send command to the node runner\nFailed to send command to the node runner\nFailed to send command to the node runner\nDefines errors for <code>send-request</code> operation.\nThe Kademlia mode is static for the duration of the …\nDefines errors for <code>subscribe</code> operation.\nFailed to create subscription.\nTopic subscription, will unsubscribe when last instance is …\nTransport creation error.\nTransport error when attempting to listen on multiaddr.\nKademlia’s unroutable peer event.\nWeak counterpart of <code>Node</code>\nRegisters a peer ID and associated addresses\nPeer address\nReturns all known peers and their addresses without P2P …\nShould non-global addresses be added to the DHT?\nBan peer with specified peer ID.\nBootstraps Kademlia network\nAddresses to bootstrap Kademlia network\nCreates a reference to the <code>NetworkingParametersRegistry</code> …\nDefines cache size.\nReturns a collection of currently connected peers.\nReturns a collection of currently connected servers …\nCreate a new network node and node runner instances.\nReturns the number of known peers, and the number of …\nDowngrade to <code>WeakNode</code>\nDefines whether we return known peers in …\nNode’s own addresses observed remotely.\nKnown external addresses to the local peer. The addresses …\nDefines interval before the next peer address removes …\nDefines interval before the next peer address removal …\nSize of the backing file on disk\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet closest peers by multihash key using Kademlia DHT’s …\nGet closest peers by multihash key using Kademlia DHT.\nGet item providers by its key. Initiate ‘providers’ …\nReturns the request batch handle with common “connection …\nReturn a value from the Kademlia network of the DSN.\nThe configuration for the Gossip behaviour.\nNode’s own local ID.\nThe configuration for the Identify behaviour.\nPeer ID list to filter on address adding.\nHow frequently should random queries be done using …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the mode is Dynamic.\nReturns true if the mode is Static.\nThe configuration for the Kademlia behaviour.\nKademlia mode. The default value is set to Static(Client). …\nIdentity keypair of a node used for authenticated …\nA reference to the <code>NetworkingParametersRegistry</code> …\nOptional libp2p prometheus metrics. None will disable …\nList of <code>Multiaddr</code> on which to listen for incoming …\nFallback to random port if specified (or default) port is …\nNode’s own addresses where it listens for incoming …\nEstablished incoming swarm connection limit.\nEstablished outgoing swarm connection limit.\nPending incoming swarm connection limit.\nPending outgoing swarm connection limit.\nInternal prometheus metrics. None will disable metrics …\nObject constructor.\nCreates a new <code>Config</code>. Applies a subspace-specific version …\nCreates a new <code>KeyWithDistance</code> instance with the given …\nCreates a new <code>KeyWithDistance</code> instance with the given …\nCallback is called when a peer is connected.\nCallback is called when a peer is disconnected.\nCallback is called when a routable or unraoutable peer is …\nCallback is called when node starts listening on new …\nCallback is called when number of established peer …\nTriggers when we removed the peer address from the …\nDefines whether we enable cache persistence.\nConverts public key from keypair to PeerId. It serves as …\nExtracts peer ID from event.\nPeer ID\nDefines protocol version for the network peers. Affects …\nCustom libp2p protocols\nSubscribe a messgo to some topic on the DSN.\nPuts a value into the Kademlia network of the DSN.\nReturns a reference to the record key.\nUnregisters associated addresses for peer ID.\nUnregisters associated addresses for peer ID.\nThe configuration for the <code>RequestResponsesBehaviour</code> …\nDefines set of peers with a permanent connection (and …\nDrive async work in the persistence provider\nDrives the main networking future forward.\nSends the generic request to the peer and awaits the …\nAmount of time after which stored known peers contents is …\nSubscribe to some topic on the DSN.\nBackoff policy for temporary banning of unreachable peers.\nHow many temporarily banned unreachable peers to keep in …\nAdds a timeout to the setup and protocol upgrade process …\nTry to upgrade to <code>Node</code>\nMiscellaneous utilities for networking.\nYamux multiplexing configuration.\nPeer address\nPeer ID\nPeer ID\nRequest-response protocol\nHandlers for different request-response protocols\nCollection of request-response protocols.\nHelper for incoming cached piece requests.\nGeneric request-response handler, typically is used with a …\nHelper for incoming piece requests.\nHelper for incoming segment header requests.\nCached-piece-by-index request.\nCached-piece-by-index request handler\nCached-piece-by-index response, may be cached piece or …\nClosest peers\nPiece was not cached locally, but these are the closest …\nPiece was cached locally\nPiece result contains either piece itself or the closest …\nMax number of cached piece indexes to accept per request, …\nAdditional pieces that requester is interested in if they …\nAdditional pieces that requester is interested in and are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequest key - piece index\nPiece result\nGeneric request with associated response\nDefines generic request-response protocol handler.\nSpecifies log-parameters for tracing.\nDefines request-response protocol name.\nResponse type that corresponds to this request\nCreates new <code>GenericRequestHandler</code> by given handler.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun <code>RequestHandler</code>.\nPiece-by-index request\nPiece-by-index request handler\nPiece-by-index response, may be cached piece or stored in …\nMax number of cached pieces to accept per request, equals …\nAdditional pieces that requester is interested in if they …\nAdditional pieces that requester is interested in and are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPiece, if found\nRequest key - piece index\nDefines how many segment headers to return, segments will …\nCreate a new segment-header-by-segment-indexes request …\nSegment header by segment indexes protocol request.\nSegment header by segment indexes protocol response.\nSegment headers by segment indexes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturned data.\nNumber of segment headers to return.\nSegment indexes to get.\nThe connection closed before a response was received.\nThe connection closed before a response could be send.\nThe request could not be sent because a dialing attempt …\nA protocol has been specified multiple times.\nEvent generated by the <code>RequestResponseFactoryBehaviour</code>.\nWhen sending a request, what to do on a disconnected …\nJust fail if the destination is not yet connected.\nPossible failures occurring in the context of receiving an …\nA remote sent a request and either we have successfully …\nA single request received by a peer on a request-response …\nAn IO failure happened on an outbound stream.\nAn IO failure happened on an inbound stream.\nProblem on the network.\nProblem on the network.\nPossible failures occurring in the context of sending an …\nResponse for an incoming request to be send by a request …\nConfiguration for a single request-response protocol.\nError when registering a protocol.\nError in a request.\nA request initiated using …\nDefines a handler for the request-response protocol …\nImplementation of <code>NetworkBehaviour</code> that provides support …\nError when processing a request sent by a remote.\nThe local peer failed to respond to an inbound request due …\nThe request timed out before a response was received.\nThe inbound request timed out, either while reading the …\nTry to connect to the peer.\nThe remote supports none of the requested protocols.\nThe local peer supports none of the protocols requested by …\nClone boxed value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChannel on which the networking service will send incoming …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum allowed size, in bytes, of a request.\nMaximum allowed size, in bytes, of a response.\nName of the protocol on the wire. Should be something like …\nCreates a new behaviour. Must be passed a list of …\nCreates request-response protocol config.\nInforms the behaviour about an event from the <code>Swarm</code>.\nRequest sent by the remote. Will always be smaller than …\nWho sent the request.\nChannel to send back the response.\nReturns a config for the request-response protocol factory.\nReturns a protocol name.\nDuration after which emitted requests are considered timed …\nThe payload of the response.\nRuns the underlying protocol handler.\nInitiates sending a request.\nIf provided, the <code>oneshot::Sender</code> will be notified when the …\nShall we connect to a disconnected peer?\nDuration the request took.\nPeer which has emitted the request.\nPeer that we sent the request to, if one was chosen.\nName of the protocol in question.\nName of the protocol in question.\nWhether handling the request was successful or …\nResult of the request.\nConvenience alias for peer ID and its multiaddresses.\nMetrics for Subspace networking\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines multihash codes for Subspace DSN.\nConstructor\nProvides methods to retrieve pieces from DSN.\nHelper function. Converts multiaddresses to a tuple with …\nType alias for libp2p Multihash. Constant 64 was copied …\nSubspace Network multihash codes.\nPiece index code.\nHelper trait for converting to multihash.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert to multihash by the default multihash code.\nConvert to multihash by the specified multihash code.\nStub implementation for piece validation.\nPiece provider with cancellation and piece validator. Use …\nValidates piece against using its commitment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet pieces with provided indices from cache.\nGet piece from archival storage (L1). The algorithm tries …\nReturns piece by its index from farmer’s piece cache (L2)\nGet piece from a particular peer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new piece provider.\nValidates piece against using its commitment.")