searchState.loadedDescShard("domain_test_service", 0, "Crate used for testing with Domain.\nThe domain id of the auto-id domain\nThe domain id of the evm domain\nSet of test accounts.\nChain specification for the domain test runtime.\nConstruct an extrinsic that can be applied to the test …\nConstruct an unsigned extrinsic that can be applied to the …\nUtilities used for testing with the domain.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all test accounts.\nSet of test accounts.\nCreate a domain node <code>Configuration</code>.\nCreate a crypto <code>Pair</code> from a numeric value.\nGet account id of a <code>numeric</code> account.\nCreate chain spec\nThe auto-id domain client\nThe auto-id domain node\nThe backend type used by the test service.\nA generic domain node instance used for testing.\nA builder to create a <code>DomainNode</code>.\nDomain executor for the test service.\nThe evm domain client\nThe evm domain node\nGet the nonce of the node account\nGet the nonce of the given account\nThe <code>MultiaddrWithPeerId</code> to this node. This is useful if …\nThe <code>MultiaddrWithPeerId</code> to this node. This is useful if …\nThe <code>MultiaddrWithPeerId</code> to this node. This is useful if …\nClient backend.\nClient backend.\nClient backend.\nGive the peer at <code>addr</code> the minimum reputation, which will …\nThe node base path\nThe node base path\nThe node base path\nBuild an Auto ID domain node\nBuild an EVM domain node\nBuild an EVM domain node with the given domain id\nRemove all tx from the tx pool\nClient’s instance.\nClient’s instance.\nClient’s instance.\nCode executor.\nCode executor.\nCode executor.\nMake the node connect to the given domain node.\nConstruct a signed extrinsic with the current nonce of the …\nConstruct a signed extrinsic with the given nonce and tip …\nConstruct an unsigned extrinsic and send it to this node.\nConstruct a signed extrinsic.\nConstruct a signed extrinsic with the given transaction …\nConstruct an unsigned extrinsic that can be applied to the …\nThe domain id\nThe domain id\nThe domain id\nReturns the current EVM contract creation allow list. …\nInstruct the node to exclusively connect to registered …\nGet the free balance of the given account\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the open XDM channel for given chain\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe node’s account key\nThe node’s account key\nThe node’s account key\nNetwork service.\nNetwork service.\nNetwork service.\nCreate a new instance of <code>Self</code>.\nDomain oeprator.\nDomain oeprator.\nDomain oeprator.\nSet the operator id\nRPCHandlers to make RPC queries.\nRPCHandlers to make RPC queries.\nRPCHandlers to make RPC queries.\nSend an extrinsic to this node.\nSends a signed system.remark extrinsic to the pool …\nSkip empty bundle production when there is no non-empty …\nTake and stop the domain node and delete its database lock …\nSync service.\nSync service.\nSync service.\nTaskManager’s instance.\nTaskManager’s instance.\nTaskManager’s instance.\nSink to the node’s tx pool\nSink to the node’s tx pool\nSink to the node’s tx pool\nGive the peer at <code>addr</code> a high reputation, which guarantees …\nWait for <code>count</code> blocks to be imported in the node and then …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturn key pair.\nReturn public key.\nSign <code>msg</code>.\nReturn account id\nReturn seed string.")