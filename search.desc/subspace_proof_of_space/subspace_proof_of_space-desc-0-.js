searchState.loadedDescShard("subspace_proof_of_space", 0, "Proof of space implementation\nChia table\nInstance that can be used to generate tables with better …\nProof of space table type\nShim table\nProof of space table type\nProof of space kind\nStateful table generator with better performance.\nChia proof of space implementation\nChia proof of space reimplementation in Rust\nTry to find proof at <code>challenge_index</code> if it exists\nReturns the argument unchanged.\nGenerate a new table with 32 bytes seed.\nGenerate a new table with 32 bytes seed using parallelism.\nReturns a stateful table generator with better performance\nCalls <code>U::from(self)</code>.\nCheck whether proof created earlier is valid\nShim proof of space implementation that works much faster …\nProof of space table.\nProof of space table generator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollection of Chia tables\nCaches that can be used to optimize the creation of …\nCreate Chia proof of space tables. There also exists …\nAlmost the same as <code>Self::create()</code>, but uses parallelism …\nCreate a new instance\nFind proof of space for a given challenge.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerify proof of space for a given seed and challenge\nProof of space table.\nProof of space table generator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")