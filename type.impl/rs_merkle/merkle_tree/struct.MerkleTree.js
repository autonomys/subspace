(function() {
    var type_impls = Object.fromEntries([["sp_domains",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-MerkleTree%3CT%3E\" class=\"impl\"><a href=\"#impl-Clone-for-MerkleTree%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for MerkleTree&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + Hasher,\n    &lt;T as Hasher&gt;::Hash: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; MerkleTree&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","sp_domains::merkle_tree::MerkleTree"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-MerkleTree%3CT%3E\" class=\"impl\"><a href=\"#impl-Default-for-MerkleTree%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for MerkleTree&lt;T&gt;<div class=\"where\">where\n    T: Hasher,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; MerkleTree&lt;T&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","sp_domains::merkle_tree::MerkleTree"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MerkleTree%3CT%3E\" class=\"impl\"><a href=\"#impl-MerkleTree%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; MerkleTree&lt;T&gt;<div class=\"where\">where\n    T: Hasher,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; MerkleTree&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new instance of Merkle Tree. Requires a hash algorithm to be specified.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rs_merkle::{MerkleTree, algorithms::Sha256};\n\n<span class=\"kw\">let </span>merkle_tree: MerkleTree&lt;Sha256&gt; = MerkleTree::new();\n\n<span class=\"kw\">let </span>another_merkle_tree = MerkleTree::&lt;Sha256&gt;::new();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_leaves\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_leaves</a>(leaves: &amp;[&lt;T as Hasher&gt;::Hash]) -&gt; MerkleTree&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Clones the leaves and builds the tree from them</p>\n<h6 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>leaves = [\n    Sha256::hash(<span class=\"string\">\"a\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"b\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"c\"</span>.as_bytes()),\n];\n\n<span class=\"kw\">let </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::from_leaves(<span class=\"kw-2\">&amp;</span>leaves);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.root\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">root</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;T as Hasher&gt;::Hash&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the tree root - the top hash of the tree. Used in the inclusion proof verification.</p>\n<h6 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>leaves = [\n    Sha256::hash(<span class=\"string\">\"a\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"b\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"c\"</span>.as_bytes()),\n];\n\n<span class=\"kw\">let </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::from_leaves(<span class=\"kw-2\">&amp;</span>leaves);\n\n<span class=\"kw\">let </span>indices_to_prove = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>leaves_to_prove = leaves.get(<span class=\"number\">0</span>..<span class=\"number\">2</span>).ok_or(<span class=\"string\">\"can't get leaves to prove\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>proof = merkle_tree.proof(<span class=\"kw-2\">&amp;</span>indices_to_prove);\n<span class=\"kw\">let </span>root = merkle_tree.root().ok_or(<span class=\"string\">\"couldn't get the merkle root\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(proof.verify(root, <span class=\"kw-2\">&amp;</span>indices_to_prove, leaves_to_prove, leaves.len()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.root_hex\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">root_hex</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Similar to [<code>MerkleTree::root</code>], but returns a hex encoded string instead of\n[<code>Hasher::Hash</code>].</p>\n<h6 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>leaves = [\n    Sha256::hash(<span class=\"string\">\"a\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"b\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"c\"</span>.as_bytes()),\n];\n\n<span class=\"kw\">let </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::from_leaves(<span class=\"kw-2\">&amp;</span>leaves);\n<span class=\"kw\">let </span>root = merkle_tree.root_hex().ok_or(<span class=\"string\">\"couldn't get the merkle root\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(\n    root,\n    <span class=\"string\">\"7075152d03a5cd92104887b476862778ec0c87be5c2fa1c0a90f87c49fad6eff\"</span>.to_string()\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.proof\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">proof</a>(&amp;self, leaf_indices: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>]) -&gt; MerkleProof&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the Merkle proof required to prove the inclusion of items in a data set.</p>\n<h6 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>leaves: Vec&lt;[u8; <span class=\"number\">32</span>]&gt; = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"f\"</span>]\n    .iter()\n    .map(|x| Sha256::hash(x.as_bytes()))\n    .collect();\n\n<span class=\"kw\">let </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::from_leaves(<span class=\"kw-2\">&amp;</span>leaves);\n<span class=\"kw\">let </span>indices_to_prove = <span class=\"macro\">vec!</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>leaves_to_prove = leaves.get(<span class=\"number\">3</span>..<span class=\"number\">5</span>).ok_or(<span class=\"string\">\"can't get leaves to prove\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>merkle_proof = merkle_tree.proof(<span class=\"kw-2\">&amp;</span>indices_to_prove);\n<span class=\"kw\">let </span>merkle_root = merkle_tree.root().ok_or(<span class=\"string\">\"couldn't get the merkle root\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"comment\">// Serialize proof to pass it to the client\n</span><span class=\"kw\">let </span>proof_bytes = merkle_proof.to_bytes();\n\n<span class=\"comment\">// Parse proof back on the client\n</span><span class=\"kw\">let </span>proof = MerkleProof::&lt;Sha256&gt;::try_from(proof_bytes)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(proof.verify(merkle_root, <span class=\"kw-2\">&amp;</span>indices_to_prove, leaves_to_prove, leaves.len()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">insert</a>(&amp;mut self, leaf: &lt;T as Hasher&gt;::Hash) -&gt; &amp;mut MerkleTree&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts a new leaf. Please note it won’t modify the root just yet; For the changes\nto be applied to the root, [<code>MerkleTree::commit</code>] method should be called first. To get the\nroot of the new tree without applying the changes, you can use\n[<code>MerkleTree::uncommitted_root</code>]</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Get the root after an insert:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::new();\nmerkle_tree.insert(Sha256::hash(<span class=\"string\">\"a\"</span>.as_bytes()));\n\n<span class=\"macro\">assert_eq!</span>(merkle_tree.root(), <span class=\"prelude-val\">None</span>);\n\nmerkle_tree.commit();\n<span class=\"macro\">assert_eq!</span>(\n    merkle_tree.root_hex(),\n    <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb\"</span>.to_string())\n);</code></pre></div>\n<p>Inserts also can be chained with [<code>MerkleTree::commit</code>] for convenience:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::new();\nmerkle_tree\n    .insert(Sha256::hash(<span class=\"string\">\"a\"</span>.as_bytes()))\n    .commit();\n\n<span class=\"macro\">assert_eq!</span>(\n    merkle_tree.root_hex(),\n    <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb\"</span>.to_string())\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">append</a>(\n    &amp;mut self,\n    leaves: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;T as Hasher&gt;::Hash&gt;,\n) -&gt; &amp;mut MerkleTree&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Appends leaves to the tree. Behaves similarly to [<code>MerkleTree::insert</code>], but for a list of\nitems. Takes ownership of the elements of the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>std::vec::Vec&lt;T&gt;</code></a>,\nsimilarly to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.append\" title=\"method alloc::vec::Vec::append\"><code>std::vec::Vec::append</code></a>.</p>\n<h6 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>leaves = <span class=\"macro\">vec!</span>[\n    Sha256::hash(<span class=\"string\">\"a\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"b\"</span>.as_bytes()),\n];\nmerkle_tree\n    .append(<span class=\"kw-2\">&amp;mut </span>leaves)\n    .commit();\n\n<span class=\"macro\">assert_eq!</span>(\n    merkle_tree.root_hex(),\n    <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"e5a01fee14e0ed5c48714f22180f25ad8365b53f9779f79dc4a3d7e93963f94a\"</span>.to_string())\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.commit\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">commit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Commits the changes made by [<code>MerkleTree::insert</code>] and [<code>MerkleTree::append</code>]\nand modifies the root.\nCommits are saved to the history, so the tree can be rolled back to any previous commit\nusing [<code>MerkleTree::rollback</code>]</p>\n<h6 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>leaves = <span class=\"macro\">vec!</span>[\n    Sha256::hash(<span class=\"string\">\"a\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"b\"</span>.as_bytes()),\n];\nmerkle_tree.append(<span class=\"kw-2\">&amp;mut </span>leaves);\n<span class=\"macro\">assert_eq!</span>(\n    merkle_tree.root_hex(),\n    <span class=\"prelude-val\">None\n</span>);\n\nmerkle_tree.commit();\n<span class=\"macro\">assert_eq!</span>(\n    merkle_tree.root_hex(),\n    <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"e5a01fee14e0ed5c48714f22180f25ad8365b53f9779f79dc4a3d7e93963f94a\"</span>.to_string())\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rollback\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">rollback</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Rolls back one commit and reverts the tree to the previous state.\nRemoves the most recent commit from the history.</p>\n<h6 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::new();\n\nmerkle_tree.insert(Sha256::hash(<span class=\"string\">\"a\"</span>.as_bytes())).commit();\n<span class=\"macro\">assert_eq!</span>(\n    merkle_tree.root_hex(),\n    <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb\"</span>.to_string())\n);\n\nmerkle_tree.insert(Sha256::hash(<span class=\"string\">\"b\"</span>.as_bytes())).commit();\n<span class=\"macro\">assert_eq!</span>(\n    merkle_tree.root_hex(),\n    <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"e5a01fee14e0ed5c48714f22180f25ad8365b53f9779f79dc4a3d7e93963f94a\"</span>.to_string())\n);\n\n<span class=\"comment\">// Rollback to the previous state\n</span>merkle_tree.rollback();\n<span class=\"macro\">assert_eq!</span>(\n    merkle_tree.root_hex(),\n    <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb\"</span>.to_string())\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.uncommitted_root\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">uncommitted_root</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;T as Hasher&gt;::Hash&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the root of the uncommitted changes as if they were committed.\nWill return the same hash as [<code>MerkleTree::root</code>] after [<code>MerkleTree::commit</code>]</p>\n<p>For examples, please check [<code>MerkleTree::uncommitted_root_hex</code>]</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.uncommitted_root_hex\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">uncommitted_root_hex</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the root of the uncommitted changes as if they were committed. Serializes\nthe result as a hex string.\nWill return the same hash as [<code>MerkleTree::root_hex</code>] after [<code>MerkleTree::commit</code>]</p>\n<h6 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>leaves = <span class=\"macro\">vec!</span>[\n    Sha256::hash(<span class=\"string\">\"a\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"b\"</span>.as_bytes()),\n];\nmerkle_tree.append(<span class=\"kw-2\">&amp;mut </span>leaves);\n<span class=\"macro\">assert_eq!</span>(\n    merkle_tree.root_hex(),\n    <span class=\"prelude-val\">None\n</span>);\n<span class=\"macro\">assert_eq!</span>(\n     merkle_tree.uncommitted_root_hex(),\n     <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"e5a01fee14e0ed5c48714f22180f25ad8365b53f9779f79dc4a3d7e93963f94a\"</span>.to_string())\n);\n\nmerkle_tree.commit();\n<span class=\"macro\">assert_eq!</span>(\n    merkle_tree.root_hex(),\n    <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"e5a01fee14e0ed5c48714f22180f25ad8365b53f9779f79dc4a3d7e93963f94a\"</span>.to_string())\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abort_uncommitted\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">abort_uncommitted</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears all uncommitted changes made by [<code>MerkleTree::insert</code>] and [<code>MerkleTree::append</code>]\noperations without applying them to the tree.</p>\n<h6 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>leaves = <span class=\"macro\">vec!</span>[\n    Sha256::hash(<span class=\"string\">\"a\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"b\"</span>.as_bytes()),\n];\n<span class=\"macro\">assert_eq!</span>(\n    merkle_tree.root(),\n    <span class=\"prelude-val\">None\n</span>);\n\nmerkle_tree.append(<span class=\"kw-2\">&amp;mut </span>leaves);\nmerkle_tree.abort_uncommitted();\nmerkle_tree.commit();\n\n<span class=\"macro\">assert_eq!</span>(\n    merkle_tree.root(),\n    <span class=\"prelude-val\">None\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.depth\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">depth</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the tree depth. A tree depth is how many layers there is between the\nleaves and the root</p>\n<h6 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>leaves = [\n    Sha256::hash(<span class=\"string\">\"a\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"b\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"c\"</span>.as_bytes()),\n];\n\n<span class=\"kw\">let </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::from_leaves(<span class=\"kw-2\">&amp;</span>leaves);\n<span class=\"macro\">assert_eq!</span>(merkle_tree.depth(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leaves\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">leaves</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;T as Hasher&gt;::Hash&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a copy of the tree leaves - the base level of the tree.</p>\n<h6 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>leaves = [\n    Sha256::hash(<span class=\"string\">\"a\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"b\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"c\"</span>.as_bytes()),\n];\n\n<span class=\"kw\">let </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::from_leaves(<span class=\"kw-2\">&amp;</span>leaves);\n<span class=\"macro\">assert_eq!</span>(merkle_tree.leaves(), <span class=\"prelude-val\">Some</span>(leaves.to_vec()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leaves_len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">leaves_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leaves in the tree.</p>\n<h6 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>leaves = [\n    Sha256::hash(<span class=\"string\">\"a\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"b\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"c\"</span>.as_bytes()),\n];\n\n<span class=\"kw\">let </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::from_leaves(<span class=\"kw-2\">&amp;</span>leaves);\n<span class=\"macro\">assert_eq!</span>(merkle_tree.leaves_len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details></div></details>",0,"sp_domains::merkle_tree::MerkleTree"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[25665]}