(function() {
    var type_impls = Object.fromEntries([["sp_domains",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MerkleProof%3CT%3E\" class=\"impl\"><a href=\"#impl-MerkleProof%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; MerkleProof&lt;T&gt;<div class=\"where\">where\n    T: Hasher,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(proof_hashes: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;T as Hasher&gt;::Hash&gt;) -&gt; MerkleProof&lt;T&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_bytes</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;MerkleProof&lt;T&gt;, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a proof from a slice of bytes, direct hashes order. If you’re looking for\nother options of bytes to proof deserialization, take a look at [<code>MerkleProof::deserialize</code>]</p>\n<h6 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>proof_bytes: Vec&lt;u8&gt; = <span class=\"macro\">vec!</span>[\n    <span class=\"number\">46</span>, <span class=\"number\">125</span>, <span class=\"number\">44</span>, <span class=\"number\">3</span>, <span class=\"number\">169</span>, <span class=\"number\">80</span>, <span class=\"number\">122</span>, <span class=\"number\">226</span>, <span class=\"number\">101</span>, <span class=\"number\">236</span>, <span class=\"number\">245</span>, <span class=\"number\">181</span>, <span class=\"number\">53</span>, <span class=\"number\">104</span>, <span class=\"number\">133</span>, <span class=\"number\">165</span>, <span class=\"number\">51</span>, <span class=\"number\">147</span>, <span class=\"number\">162</span>,\n    <span class=\"number\">2</span>, <span class=\"number\">157</span>, <span class=\"number\">36</span>, <span class=\"number\">19</span>, <span class=\"number\">148</span>, <span class=\"number\">153</span>, <span class=\"number\">114</span>, <span class=\"number\">101</span>, <span class=\"number\">161</span>, <span class=\"number\">162</span>, <span class=\"number\">90</span>, <span class=\"number\">239</span>, <span class=\"number\">198</span>, <span class=\"number\">37</span>, <span class=\"number\">47</span>, <span class=\"number\">16</span>, <span class=\"number\">200</span>, <span class=\"number\">54</span>, <span class=\"number\">16</span>,\n    <span class=\"number\">235</span>, <span class=\"number\">202</span>, <span class=\"number\">26</span>, <span class=\"number\">5</span>, <span class=\"number\">156</span>, <span class=\"number\">11</span>, <span class=\"number\">174</span>, <span class=\"number\">130</span>, <span class=\"number\">85</span>, <span class=\"number\">235</span>, <span class=\"number\">162</span>, <span class=\"number\">249</span>, <span class=\"number\">91</span>, <span class=\"number\">228</span>, <span class=\"number\">209</span>, <span class=\"number\">215</span>, <span class=\"number\">188</span>, <span class=\"number\">250</span>,\n    <span class=\"number\">137</span>, <span class=\"number\">215</span>, <span class=\"number\">36</span>, <span class=\"number\">138</span>, <span class=\"number\">130</span>, <span class=\"number\">217</span>, <span class=\"number\">241</span>, <span class=\"number\">17</span>, <span class=\"number\">229</span>, <span class=\"number\">160</span>, <span class=\"number\">31</span>, <span class=\"number\">238</span>, <span class=\"number\">20</span>, <span class=\"number\">224</span>, <span class=\"number\">237</span>, <span class=\"number\">92</span>, <span class=\"number\">72</span>, <span class=\"number\">113</span>, <span class=\"number\">79</span>,\n    <span class=\"number\">34</span>, <span class=\"number\">24</span>, <span class=\"number\">15</span>, <span class=\"number\">37</span>, <span class=\"number\">173</span>, <span class=\"number\">131</span>, <span class=\"number\">101</span>, <span class=\"number\">181</span>, <span class=\"number\">63</span>, <span class=\"number\">151</span>, <span class=\"number\">121</span>, <span class=\"number\">247</span>, <span class=\"number\">157</span>, <span class=\"number\">196</span>, <span class=\"number\">163</span>, <span class=\"number\">215</span>, <span class=\"number\">233</span>, <span class=\"number\">57</span>, <span class=\"number\">99</span>,\n    <span class=\"number\">249</span>, <span class=\"number\">74</span>,\n];\n\n<span class=\"kw\">let </span>proof_result = MerkleProof::&lt;Sha256&gt;::from_bytes(proof_bytes.as_slice());</code></pre></div>\n<h6 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h6>\n<p>In case of a parsing error result will contain [<code>Error</code>]</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">deserialize</a>&lt;S&gt;(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;MerkleProof&lt;T&gt;, Error&gt;<div class=\"where\">where\n    S: MerkleProofSerializer,</div></h4></section></summary><div class=\"docblock\"><p>Creates a proof from a slice of bytes. Bytes can be serialized in different ways, so this\nmethod requires specifying a serializer. You can take a look at built-in serializers at\n[<code>crate::proof_serializers</code>]. If the serializer you’re looking for is not there, it is\neasy to make your own - take a look at the [<code>MerkleProofSerializer</code>] trait.</p>\n<h6 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>proof_bytes: Vec&lt;u8&gt; = <span class=\"macro\">vec!</span>[\n    <span class=\"number\">229</span>, <span class=\"number\">160</span>, <span class=\"number\">31</span>, <span class=\"number\">238</span>, <span class=\"number\">20</span>, <span class=\"number\">224</span>, <span class=\"number\">237</span>, <span class=\"number\">92</span>, <span class=\"number\">72</span>, <span class=\"number\">113</span>, <span class=\"number\">79</span>, <span class=\"number\">34</span>, <span class=\"number\">24</span>, <span class=\"number\">15</span>, <span class=\"number\">37</span>, <span class=\"number\">173</span>, <span class=\"number\">131</span>, <span class=\"number\">101</span>, <span class=\"number\">181</span>,\n    <span class=\"number\">63</span>, <span class=\"number\">151</span>, <span class=\"number\">121</span>, <span class=\"number\">247</span>, <span class=\"number\">157</span>, <span class=\"number\">196</span>, <span class=\"number\">163</span>, <span class=\"number\">215</span>, <span class=\"number\">233</span>, <span class=\"number\">57</span>, <span class=\"number\">99</span>, <span class=\"number\">249</span>, <span class=\"number\">74</span>,\n    <span class=\"number\">37</span>, <span class=\"number\">47</span>, <span class=\"number\">16</span>, <span class=\"number\">200</span>, <span class=\"number\">54</span>, <span class=\"number\">16</span>, <span class=\"number\">235</span>, <span class=\"number\">202</span>, <span class=\"number\">26</span>, <span class=\"number\">5</span>, <span class=\"number\">156</span>, <span class=\"number\">11</span>, <span class=\"number\">174</span>, <span class=\"number\">130</span>, <span class=\"number\">85</span>, <span class=\"number\">235</span>, <span class=\"number\">162</span>, <span class=\"number\">249</span>, <span class=\"number\">91</span>, <span class=\"number\">228</span>,\n    <span class=\"number\">209</span>, <span class=\"number\">215</span>, <span class=\"number\">188</span>, <span class=\"number\">250</span>, <span class=\"number\">137</span>, <span class=\"number\">215</span>, <span class=\"number\">36</span>, <span class=\"number\">138</span>, <span class=\"number\">130</span>, <span class=\"number\">217</span>, <span class=\"number\">241</span>, <span class=\"number\">17</span>,\n    <span class=\"number\">46</span>, <span class=\"number\">125</span>, <span class=\"number\">44</span>, <span class=\"number\">3</span>, <span class=\"number\">169</span>, <span class=\"number\">80</span>, <span class=\"number\">122</span>, <span class=\"number\">226</span>, <span class=\"number\">101</span>, <span class=\"number\">236</span>, <span class=\"number\">245</span>, <span class=\"number\">181</span>, <span class=\"number\">53</span>, <span class=\"number\">104</span>, <span class=\"number\">133</span>, <span class=\"number\">165</span>, <span class=\"number\">51</span>, <span class=\"number\">147</span>, <span class=\"number\">162</span>,\n    <span class=\"number\">2</span>, <span class=\"number\">157</span>, <span class=\"number\">36</span>, <span class=\"number\">19</span>, <span class=\"number\">148</span>, <span class=\"number\">153</span>, <span class=\"number\">114</span>, <span class=\"number\">101</span>, <span class=\"number\">161</span>, <span class=\"number\">162</span>, <span class=\"number\">90</span>, <span class=\"number\">239</span>, <span class=\"number\">198</span>,\n];\n\n<span class=\"kw\">let </span>proof: MerkleProof&lt;Sha256&gt; = MerkleProof\n    ::deserialize::&lt;proof_serializers::ReverseHashesOrder&gt;(proof_bytes.as_slice())<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(proof.serialize::&lt;proof_serializers::DirectHashesOrder&gt;(), <span class=\"kw-2\">&amp;</span>[\n    <span class=\"number\">46</span>, <span class=\"number\">125</span>, <span class=\"number\">44</span>, <span class=\"number\">3</span>, <span class=\"number\">169</span>, <span class=\"number\">80</span>, <span class=\"number\">122</span>, <span class=\"number\">226</span>, <span class=\"number\">101</span>, <span class=\"number\">236</span>, <span class=\"number\">245</span>, <span class=\"number\">181</span>, <span class=\"number\">53</span>, <span class=\"number\">104</span>, <span class=\"number\">133</span>, <span class=\"number\">165</span>, <span class=\"number\">51</span>, <span class=\"number\">147</span>, <span class=\"number\">162</span>,\n    <span class=\"number\">2</span>, <span class=\"number\">157</span>, <span class=\"number\">36</span>, <span class=\"number\">19</span>, <span class=\"number\">148</span>, <span class=\"number\">153</span>, <span class=\"number\">114</span>, <span class=\"number\">101</span>, <span class=\"number\">161</span>, <span class=\"number\">162</span>, <span class=\"number\">90</span>, <span class=\"number\">239</span>, <span class=\"number\">198</span>,\n    <span class=\"number\">37</span>, <span class=\"number\">47</span>, <span class=\"number\">16</span>, <span class=\"number\">200</span>, <span class=\"number\">54</span>, <span class=\"number\">16</span>, <span class=\"number\">235</span>, <span class=\"number\">202</span>, <span class=\"number\">26</span>, <span class=\"number\">5</span>, <span class=\"number\">156</span>, <span class=\"number\">11</span>, <span class=\"number\">174</span>, <span class=\"number\">130</span>, <span class=\"number\">85</span>, <span class=\"number\">235</span>, <span class=\"number\">162</span>, <span class=\"number\">249</span>, <span class=\"number\">91</span>, <span class=\"number\">228</span>,\n    <span class=\"number\">209</span>, <span class=\"number\">215</span>, <span class=\"number\">188</span>, <span class=\"number\">250</span>, <span class=\"number\">137</span>, <span class=\"number\">215</span>, <span class=\"number\">36</span>, <span class=\"number\">138</span>, <span class=\"number\">130</span>, <span class=\"number\">217</span>, <span class=\"number\">241</span>, <span class=\"number\">17</span>,\n    <span class=\"number\">229</span>, <span class=\"number\">160</span>, <span class=\"number\">31</span>, <span class=\"number\">238</span>, <span class=\"number\">20</span>, <span class=\"number\">224</span>, <span class=\"number\">237</span>, <span class=\"number\">92</span>, <span class=\"number\">72</span>, <span class=\"number\">113</span>, <span class=\"number\">79</span>, <span class=\"number\">34</span>, <span class=\"number\">24</span>, <span class=\"number\">15</span>, <span class=\"number\">37</span>, <span class=\"number\">173</span>, <span class=\"number\">131</span>, <span class=\"number\">101</span>, <span class=\"number\">181</span>,\n    <span class=\"number\">63</span>, <span class=\"number\">151</span>, <span class=\"number\">121</span>, <span class=\"number\">247</span>, <span class=\"number\">157</span>, <span class=\"number\">196</span>, <span class=\"number\">163</span>, <span class=\"number\">215</span>, <span class=\"number\">233</span>, <span class=\"number\">57</span>, <span class=\"number\">99</span>, <span class=\"number\">249</span>, <span class=\"number\">74</span>,\n]);</code></pre></div>\n<h6 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h6>\n<p>In case of a parsing error result will contain [<code>Error</code>]</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.verify\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">verify</a>(\n    &amp;self,\n    root: &lt;T as Hasher&gt;::Hash,\n    leaf_indices: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>],\n    leaf_hashes: &amp;[&lt;T as Hasher&gt;::Hash],\n    total_leaves_count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Uses proof to verify that a given set of elements is contained in the original data\nset the proof was made for.</p>\n<h6 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>leaves = [\n    Sha256::hash(<span class=\"string\">\"a\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"b\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"c\"</span>.as_bytes()),\n];\n\n<span class=\"kw\">let </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::from_leaves(<span class=\"kw-2\">&amp;</span>leaves);\n\n<span class=\"kw\">let </span>indices_to_prove = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>leaves_to_prove = leaves.get(<span class=\"number\">0</span>..<span class=\"number\">2</span>).ok_or(<span class=\"string\">\"can't get leaves to prove\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>proof = merkle_tree.proof(<span class=\"kw-2\">&amp;</span>indices_to_prove);\n<span class=\"kw\">let </span>root = merkle_tree.root().ok_or(<span class=\"string\">\"couldn't get the merkle root\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(proof.verify(root, <span class=\"kw-2\">&amp;</span>indices_to_prove, leaves_to_prove, leaves.len()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.root\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">root</a>(\n    &amp;self,\n    leaf_indices: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>],\n    leaf_hashes: &amp;[&lt;T as Hasher&gt;::Hash],\n    total_leaves_count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;T as Hasher&gt;::Hash, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates Merkle root based on provided leaves and proof hashes. Used inside the\n[<code>MerkleProof::verify</code>] method, but sometimes can be used on its own.</p>\n<h6 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>leaves = [\n    Sha256::hash(<span class=\"string\">\"a\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"b\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"c\"</span>.as_bytes()),\n];\n\n<span class=\"kw\">let </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::from_leaves(<span class=\"kw-2\">&amp;</span>leaves);\n\n<span class=\"kw\">let </span>indices_to_prove = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>leaves_to_prove = leaves.get(<span class=\"number\">0</span>..<span class=\"number\">2</span>).ok_or(<span class=\"string\">\"can't get leaves to prove\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>proof = merkle_tree.proof(<span class=\"kw-2\">&amp;</span>indices_to_prove);\n<span class=\"kw\">let </span>root = merkle_tree.root().ok_or(<span class=\"string\">\"couldn't get the merkle root\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(\n    proof.root(<span class=\"kw-2\">&amp;</span>indices_to_prove, leaves_to_prove, leaves.len())<span class=\"question-mark\">?</span>,\n    root\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.root_hex\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">root_hex</a>(\n    &amp;self,\n    leaf_indices: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>],\n    leaf_hashes: &amp;[&lt;T as Hasher&gt;::Hash],\n    total_leaves_count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the root and serializes it into a hex string.</p>\n<h6 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>leaves = [\n    Sha256::hash(<span class=\"string\">\"a\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"b\"</span>.as_bytes()),\n    Sha256::hash(<span class=\"string\">\"c\"</span>.as_bytes()),\n];\n\n<span class=\"kw\">let </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::from_leaves(<span class=\"kw-2\">&amp;</span>leaves);\n\n<span class=\"kw\">let </span>indices_to_prove = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>leaves_to_prove = leaves.get(<span class=\"number\">0</span>..<span class=\"number\">2</span>).ok_or(<span class=\"string\">\"can't get leaves to prove\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>proof = merkle_tree.proof(<span class=\"kw-2\">&amp;</span>indices_to_prove);\n<span class=\"kw\">let </span>root_hex = merkle_tree.root_hex().ok_or(<span class=\"string\">\"couldn't get the merkle root\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(\n    proof.root_hex(<span class=\"kw-2\">&amp;</span>indices_to_prove, leaves_to_prove, leaves.len())<span class=\"question-mark\">?</span>,\n    root_hex\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.proof_hashes\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">proof_hashes</a>(&amp;self) -&gt; &amp;[&lt;T as Hasher&gt;::Hash]</h4></section></summary><div class=\"docblock\"><p>Returns all hashes from the proof, sorted from the left to right,\nbottom to top.</p>\n<h6 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>proof_hashes: Vec&lt;[u8; <span class=\"number\">32</span>]&gt; = <span class=\"macro\">vec!</span>[\n    [\n        <span class=\"number\">46</span>, <span class=\"number\">125</span>, <span class=\"number\">44</span>, <span class=\"number\">3</span>, <span class=\"number\">169</span>, <span class=\"number\">80</span>, <span class=\"number\">122</span>, <span class=\"number\">226</span>, <span class=\"number\">101</span>, <span class=\"number\">236</span>, <span class=\"number\">245</span>, <span class=\"number\">181</span>, <span class=\"number\">53</span>, <span class=\"number\">104</span>, <span class=\"number\">133</span>, <span class=\"number\">165</span>, <span class=\"number\">51</span>, <span class=\"number\">147</span>,\n        <span class=\"number\">162</span>, <span class=\"number\">2</span>, <span class=\"number\">157</span>, <span class=\"number\">36</span>, <span class=\"number\">19</span>, <span class=\"number\">148</span>, <span class=\"number\">153</span>, <span class=\"number\">114</span>, <span class=\"number\">101</span>, <span class=\"number\">161</span>, <span class=\"number\">162</span>, <span class=\"number\">90</span>, <span class=\"number\">239</span>, <span class=\"number\">198\n    </span>],\n    [\n        <span class=\"number\">37</span>, <span class=\"number\">47</span>, <span class=\"number\">16</span>, <span class=\"number\">200</span>, <span class=\"number\">54</span>, <span class=\"number\">16</span>, <span class=\"number\">235</span>, <span class=\"number\">202</span>, <span class=\"number\">26</span>, <span class=\"number\">5</span>, <span class=\"number\">156</span>, <span class=\"number\">11</span>, <span class=\"number\">174</span>, <span class=\"number\">130</span>, <span class=\"number\">85</span>, <span class=\"number\">235</span>, <span class=\"number\">162</span>, <span class=\"number\">249</span>, <span class=\"number\">91</span>,\n        <span class=\"number\">228</span>, <span class=\"number\">209</span>, <span class=\"number\">215</span>, <span class=\"number\">188</span>, <span class=\"number\">250</span>, <span class=\"number\">137</span>, <span class=\"number\">215</span>, <span class=\"number\">36</span>, <span class=\"number\">138</span>, <span class=\"number\">130</span>, <span class=\"number\">217</span>, <span class=\"number\">241</span>, <span class=\"number\">17\n    </span>],\n    [\n        <span class=\"number\">229</span>, <span class=\"number\">160</span>, <span class=\"number\">31</span>, <span class=\"number\">238</span>, <span class=\"number\">20</span>, <span class=\"number\">224</span>, <span class=\"number\">237</span>, <span class=\"number\">92</span>, <span class=\"number\">72</span>, <span class=\"number\">113</span>, <span class=\"number\">79</span>, <span class=\"number\">34</span>, <span class=\"number\">24</span>, <span class=\"number\">15</span>, <span class=\"number\">37</span>, <span class=\"number\">173</span>, <span class=\"number\">131</span>, <span class=\"number\">101</span>,\n        <span class=\"number\">181</span>, <span class=\"number\">63</span>, <span class=\"number\">151</span>, <span class=\"number\">121</span>, <span class=\"number\">247</span>, <span class=\"number\">157</span>, <span class=\"number\">196</span>, <span class=\"number\">163</span>, <span class=\"number\">215</span>, <span class=\"number\">233</span>, <span class=\"number\">57</span>, <span class=\"number\">99</span>, <span class=\"number\">249</span>, <span class=\"number\">74\n    </span>],\n];\n<span class=\"kw\">let </span>proof_hashes_copy = proof_hashes.clone();\n\n<span class=\"kw\">let </span>proof = MerkleProof::&lt;Sha256&gt;::new(proof_hashes_copy);\n<span class=\"macro\">assert_eq!</span>(proof.proof_hashes(), <span class=\"kw-2\">&amp;</span>proof_hashes);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.proof_hashes_hex\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">proof_hashes_hex</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns all hashes from the proof, sorted from the left to right,\nbottom to top, as a vector of lower hex strings.\nFor a slice of [<code>Hasher::Hash</code>], see [<code>MerkleProof::proof_hashes</code>]</p>\n<h6 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>proof_bytes: Vec&lt;u8&gt; = <span class=\"macro\">vec!</span>[\n    <span class=\"number\">46</span>, <span class=\"number\">125</span>, <span class=\"number\">44</span>, <span class=\"number\">3</span>, <span class=\"number\">169</span>, <span class=\"number\">80</span>, <span class=\"number\">122</span>, <span class=\"number\">226</span>, <span class=\"number\">101</span>, <span class=\"number\">236</span>, <span class=\"number\">245</span>, <span class=\"number\">181</span>, <span class=\"number\">53</span>, <span class=\"number\">104</span>, <span class=\"number\">133</span>, <span class=\"number\">165</span>, <span class=\"number\">51</span>, <span class=\"number\">147</span>, <span class=\"number\">162</span>,\n    <span class=\"number\">2</span>, <span class=\"number\">157</span>, <span class=\"number\">36</span>, <span class=\"number\">19</span>, <span class=\"number\">148</span>, <span class=\"number\">153</span>, <span class=\"number\">114</span>, <span class=\"number\">101</span>, <span class=\"number\">161</span>, <span class=\"number\">162</span>, <span class=\"number\">90</span>, <span class=\"number\">239</span>, <span class=\"number\">198</span>, <span class=\"number\">37</span>, <span class=\"number\">47</span>, <span class=\"number\">16</span>, <span class=\"number\">200</span>, <span class=\"number\">54</span>, <span class=\"number\">16</span>,\n    <span class=\"number\">235</span>, <span class=\"number\">202</span>, <span class=\"number\">26</span>, <span class=\"number\">5</span>, <span class=\"number\">156</span>, <span class=\"number\">11</span>, <span class=\"number\">174</span>, <span class=\"number\">130</span>, <span class=\"number\">85</span>, <span class=\"number\">235</span>, <span class=\"number\">162</span>, <span class=\"number\">249</span>, <span class=\"number\">91</span>, <span class=\"number\">228</span>, <span class=\"number\">209</span>, <span class=\"number\">215</span>, <span class=\"number\">188</span>, <span class=\"number\">250</span>,\n    <span class=\"number\">137</span>, <span class=\"number\">215</span>, <span class=\"number\">36</span>, <span class=\"number\">138</span>, <span class=\"number\">130</span>, <span class=\"number\">217</span>, <span class=\"number\">241</span>, <span class=\"number\">17</span>, <span class=\"number\">229</span>, <span class=\"number\">160</span>, <span class=\"number\">31</span>, <span class=\"number\">238</span>, <span class=\"number\">20</span>, <span class=\"number\">224</span>, <span class=\"number\">237</span>, <span class=\"number\">92</span>, <span class=\"number\">72</span>, <span class=\"number\">113</span>, <span class=\"number\">79</span>,\n    <span class=\"number\">34</span>, <span class=\"number\">24</span>, <span class=\"number\">15</span>, <span class=\"number\">37</span>, <span class=\"number\">173</span>, <span class=\"number\">131</span>, <span class=\"number\">101</span>, <span class=\"number\">181</span>, <span class=\"number\">63</span>, <span class=\"number\">151</span>, <span class=\"number\">121</span>, <span class=\"number\">247</span>, <span class=\"number\">157</span>, <span class=\"number\">196</span>, <span class=\"number\">163</span>, <span class=\"number\">215</span>, <span class=\"number\">233</span>, <span class=\"number\">57</span>, <span class=\"number\">99</span>,\n    <span class=\"number\">249</span>, <span class=\"number\">74</span>,\n];\n\n<span class=\"kw\">let </span>proof = MerkleProof::&lt;Sha256&gt;::from_bytes(proof_bytes.as_slice())<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(\n    proof.proof_hashes_hex(),\n    <span class=\"macro\">vec!</span>[\n        <span class=\"string\">\"2e7d2c03a9507ae265ecf5b5356885a53393a2029d241394997265a1a25aefc6\"</span>.to_string(),\n        <span class=\"string\">\"252f10c83610ebca1a059c0bae8255eba2f95be4d1d7bcfa89d7248a82d9f111\"</span>.to_string(),\n        <span class=\"string\">\"e5a01fee14e0ed5c48714f22180f25ad8365b53f9779f79dc4a3d7e93963f94a\"</span>.to_string()\n    ]\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_bytes\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">to_bytes</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Serializes proof hashes to a flat vector of bytes, from left to right, bottom to top.\nUsually used to pass the proof to the client after extracting it from the tree.</p>\n<h6 id=\"important\"><a class=\"doc-anchor\" href=\"#important\">§</a>Important</h6>\n<p>Please note that some applications may serialize proof differently, for example in reverse\norder - from top to bottom, right to left. In that case, you’ll need to use another method -\n[<code>MerkleProof::serialize</code>] with a custom serializer. Please consult\n[<code>MerkleProof::serialize</code>] for more details.</p>\n<h6 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>leaf_values = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"f\"</span>];\n<span class=\"kw\">let </span>leaves: Vec&lt;[u8; <span class=\"number\">32</span>]&gt; = leaf_values\n    .iter()\n    .map(|x| Sha256::hash(x.as_bytes()))\n    .collect();\n\n<span class=\"kw\">let </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::from_leaves(<span class=\"kw-2\">&amp;</span>leaves);\n<span class=\"kw\">let </span>indices_to_prove = <span class=\"macro\">vec!</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>leaves_to_prove = leaves.get(<span class=\"number\">3</span>..<span class=\"number\">5</span>).ok_or(<span class=\"string\">\"can't get leaves to prove\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>merkle_proof = merkle_tree.proof(<span class=\"kw-2\">&amp;</span>indices_to_prove);\n<span class=\"kw\">let </span>merkle_root = merkle_tree.root().ok_or(<span class=\"string\">\"couldn't get the merkle root\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Serialize proof to pass it to the client over the network\n</span><span class=\"kw\">let </span>proof_bytes = merkle_proof.to_bytes();\n\n<span class=\"macro\">assert_eq!</span>(proof_bytes, <span class=\"macro\">vec!</span>[\n    <span class=\"number\">46</span>, <span class=\"number\">125</span>, <span class=\"number\">44</span>, <span class=\"number\">3</span>, <span class=\"number\">169</span>, <span class=\"number\">80</span>, <span class=\"number\">122</span>, <span class=\"number\">226</span>, <span class=\"number\">101</span>, <span class=\"number\">236</span>, <span class=\"number\">245</span>, <span class=\"number\">181</span>, <span class=\"number\">53</span>, <span class=\"number\">104</span>, <span class=\"number\">133</span>, <span class=\"number\">165</span>, <span class=\"number\">51</span>, <span class=\"number\">147</span>, <span class=\"number\">162</span>,\n    <span class=\"number\">2</span>, <span class=\"number\">157</span>, <span class=\"number\">36</span>, <span class=\"number\">19</span>, <span class=\"number\">148</span>, <span class=\"number\">153</span>, <span class=\"number\">114</span>, <span class=\"number\">101</span>, <span class=\"number\">161</span>, <span class=\"number\">162</span>, <span class=\"number\">90</span>, <span class=\"number\">239</span>, <span class=\"number\">198</span>, <span class=\"number\">37</span>, <span class=\"number\">47</span>, <span class=\"number\">16</span>, <span class=\"number\">200</span>, <span class=\"number\">54</span>, <span class=\"number\">16</span>,\n    <span class=\"number\">235</span>, <span class=\"number\">202</span>, <span class=\"number\">26</span>, <span class=\"number\">5</span>, <span class=\"number\">156</span>, <span class=\"number\">11</span>, <span class=\"number\">174</span>, <span class=\"number\">130</span>, <span class=\"number\">85</span>, <span class=\"number\">235</span>, <span class=\"number\">162</span>, <span class=\"number\">249</span>, <span class=\"number\">91</span>, <span class=\"number\">228</span>, <span class=\"number\">209</span>, <span class=\"number\">215</span>, <span class=\"number\">188</span>, <span class=\"number\">250</span>,\n    <span class=\"number\">137</span>, <span class=\"number\">215</span>, <span class=\"number\">36</span>, <span class=\"number\">138</span>, <span class=\"number\">130</span>, <span class=\"number\">217</span>, <span class=\"number\">241</span>, <span class=\"number\">17</span>, <span class=\"number\">229</span>, <span class=\"number\">160</span>, <span class=\"number\">31</span>, <span class=\"number\">238</span>, <span class=\"number\">20</span>, <span class=\"number\">224</span>, <span class=\"number\">237</span>, <span class=\"number\">92</span>, <span class=\"number\">72</span>, <span class=\"number\">113</span>, <span class=\"number\">79</span>,\n    <span class=\"number\">34</span>, <span class=\"number\">24</span>, <span class=\"number\">15</span>, <span class=\"number\">37</span>, <span class=\"number\">173</span>, <span class=\"number\">131</span>, <span class=\"number\">101</span>, <span class=\"number\">181</span>, <span class=\"number\">63</span>, <span class=\"number\">151</span>, <span class=\"number\">121</span>, <span class=\"number\">247</span>, <span class=\"number\">157</span>, <span class=\"number\">196</span>, <span class=\"number\">163</span>, <span class=\"number\">215</span>, <span class=\"number\">233</span>, <span class=\"number\">57</span>, <span class=\"number\">99</span>,\n    <span class=\"number\">249</span>, <span class=\"number\">74</span>,\n]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">serialize</a>&lt;S&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a><div class=\"where\">where\n    S: MerkleProofSerializer,</div></h4></section></summary><div class=\"docblock\"><p>Serializes proof hashes to a flat vector of bytes using a custom proof serializer.\nThe library includes some built-in proof serializers, check [<code>crate::proof_serializers</code>]\nmodule to see what’s available out of the box. If none fit your needs, you can easily\nimplement your own - check the [<code>MerkleProofSerializer</code>] trait for more details.</p>\n<h6 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>leaf_values = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"f\"</span>];\n<span class=\"kw\">let </span>leaves: Vec&lt;[u8; <span class=\"number\">32</span>]&gt; = leaf_values\n    .iter()\n    .map(|x| Sha256::hash(x.as_bytes()))\n    .collect();\n\n<span class=\"kw\">let </span>merkle_tree = MerkleTree::&lt;Sha256&gt;::from_leaves(<span class=\"kw-2\">&amp;</span>leaves);\n<span class=\"kw\">let </span>indices_to_prove = <span class=\"macro\">vec!</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>leaves_to_prove = leaves.get(<span class=\"number\">3</span>..<span class=\"number\">5</span>).ok_or(<span class=\"string\">\"can't get leaves to prove\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>merkle_proof = merkle_tree.proof(<span class=\"kw-2\">&amp;</span>indices_to_prove);\n<span class=\"kw\">let </span>merkle_root = merkle_tree.root().ok_or(<span class=\"string\">\"couldn't get the merkle root\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Serialize proof to pass it to the client over the network\n</span><span class=\"kw\">let </span>proof_bytes = merkle_proof.serialize::&lt;proof_serializers::ReverseHashesOrder&gt;();\n\n<span class=\"macro\">assert_eq!</span>(proof_bytes, <span class=\"macro\">vec!</span>[\n    <span class=\"number\">229</span>, <span class=\"number\">160</span>, <span class=\"number\">31</span>, <span class=\"number\">238</span>, <span class=\"number\">20</span>, <span class=\"number\">224</span>, <span class=\"number\">237</span>, <span class=\"number\">92</span>, <span class=\"number\">72</span>, <span class=\"number\">113</span>, <span class=\"number\">79</span>, <span class=\"number\">34</span>, <span class=\"number\">24</span>, <span class=\"number\">15</span>, <span class=\"number\">37</span>, <span class=\"number\">173</span>, <span class=\"number\">131</span>, <span class=\"number\">101</span>, <span class=\"number\">181</span>,\n    <span class=\"number\">63</span>, <span class=\"number\">151</span>, <span class=\"number\">121</span>, <span class=\"number\">247</span>, <span class=\"number\">157</span>, <span class=\"number\">196</span>, <span class=\"number\">163</span>, <span class=\"number\">215</span>, <span class=\"number\">233</span>, <span class=\"number\">57</span>, <span class=\"number\">99</span>, <span class=\"number\">249</span>, <span class=\"number\">74</span>,\n    <span class=\"number\">37</span>, <span class=\"number\">47</span>, <span class=\"number\">16</span>, <span class=\"number\">200</span>, <span class=\"number\">54</span>, <span class=\"number\">16</span>, <span class=\"number\">235</span>, <span class=\"number\">202</span>, <span class=\"number\">26</span>, <span class=\"number\">5</span>, <span class=\"number\">156</span>, <span class=\"number\">11</span>, <span class=\"number\">174</span>, <span class=\"number\">130</span>, <span class=\"number\">85</span>, <span class=\"number\">235</span>, <span class=\"number\">162</span>, <span class=\"number\">249</span>, <span class=\"number\">91</span>, <span class=\"number\">228</span>,\n    <span class=\"number\">209</span>, <span class=\"number\">215</span>, <span class=\"number\">188</span>, <span class=\"number\">250</span>, <span class=\"number\">137</span>, <span class=\"number\">215</span>, <span class=\"number\">36</span>, <span class=\"number\">138</span>, <span class=\"number\">130</span>, <span class=\"number\">217</span>, <span class=\"number\">241</span>, <span class=\"number\">17</span>,\n    <span class=\"number\">46</span>, <span class=\"number\">125</span>, <span class=\"number\">44</span>, <span class=\"number\">3</span>, <span class=\"number\">169</span>, <span class=\"number\">80</span>, <span class=\"number\">122</span>, <span class=\"number\">226</span>, <span class=\"number\">101</span>, <span class=\"number\">236</span>, <span class=\"number\">245</span>, <span class=\"number\">181</span>, <span class=\"number\">53</span>, <span class=\"number\">104</span>, <span class=\"number\">133</span>, <span class=\"number\">165</span>, <span class=\"number\">51</span>, <span class=\"number\">147</span>, <span class=\"number\">162</span>,\n    <span class=\"number\">2</span>, <span class=\"number\">157</span>, <span class=\"number\">36</span>, <span class=\"number\">19</span>, <span class=\"number\">148</span>, <span class=\"number\">153</span>, <span class=\"number\">114</span>, <span class=\"number\">101</span>, <span class=\"number\">161</span>, <span class=\"number\">162</span>, <span class=\"number\">90</span>, <span class=\"number\">239</span>, <span class=\"number\">198</span>,\n]);</code></pre></div>\n</div></details></div></details>",0,"sp_domains::merkle_tree::MerkleProof"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26%5Bu8%5D%3E-for-MerkleProof%3CT%3E\" class=\"impl\"><a href=\"#impl-TryFrom%3C%26%5Bu8%5D%3E-for-MerkleProof%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt; for MerkleProof&lt;T&gt;<div class=\"where\">where\n    T: Hasher,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;MerkleProof&lt;T&gt;, &lt;MerkleProof&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Parses proof serialized to a collection of bytes</p>\n<h6 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::convert::TryFrom;\n<span class=\"kw\">use </span>rs_merkle::{MerkleProof, algorithms::Sha256};\n\n<span class=\"kw\">let </span>proof_bytes: Vec&lt;u8&gt; = <span class=\"macro\">vec!</span>[\n    <span class=\"number\">46</span>, <span class=\"number\">125</span>, <span class=\"number\">44</span>, <span class=\"number\">3</span>, <span class=\"number\">169</span>, <span class=\"number\">80</span>, <span class=\"number\">122</span>, <span class=\"number\">226</span>, <span class=\"number\">101</span>, <span class=\"number\">236</span>, <span class=\"number\">245</span>, <span class=\"number\">181</span>, <span class=\"number\">53</span>, <span class=\"number\">104</span>, <span class=\"number\">133</span>, <span class=\"number\">165</span>, <span class=\"number\">51</span>, <span class=\"number\">147</span>, <span class=\"number\">162</span>,\n    <span class=\"number\">2</span>, <span class=\"number\">157</span>, <span class=\"number\">36</span>, <span class=\"number\">19</span>, <span class=\"number\">148</span>, <span class=\"number\">153</span>, <span class=\"number\">114</span>, <span class=\"number\">101</span>, <span class=\"number\">161</span>, <span class=\"number\">162</span>, <span class=\"number\">90</span>, <span class=\"number\">239</span>, <span class=\"number\">198</span>, <span class=\"number\">37</span>, <span class=\"number\">47</span>, <span class=\"number\">16</span>, <span class=\"number\">200</span>, <span class=\"number\">54</span>, <span class=\"number\">16</span>,\n    <span class=\"number\">235</span>, <span class=\"number\">202</span>, <span class=\"number\">26</span>, <span class=\"number\">5</span>, <span class=\"number\">156</span>, <span class=\"number\">11</span>, <span class=\"number\">174</span>, <span class=\"number\">130</span>, <span class=\"number\">85</span>, <span class=\"number\">235</span>, <span class=\"number\">162</span>, <span class=\"number\">249</span>, <span class=\"number\">91</span>, <span class=\"number\">228</span>, <span class=\"number\">209</span>, <span class=\"number\">215</span>, <span class=\"number\">188</span>, <span class=\"number\">250</span>,\n    <span class=\"number\">137</span>, <span class=\"number\">215</span>, <span class=\"number\">36</span>, <span class=\"number\">138</span>, <span class=\"number\">130</span>, <span class=\"number\">217</span>, <span class=\"number\">241</span>, <span class=\"number\">17</span>, <span class=\"number\">229</span>, <span class=\"number\">160</span>, <span class=\"number\">31</span>, <span class=\"number\">238</span>, <span class=\"number\">20</span>, <span class=\"number\">224</span>, <span class=\"number\">237</span>, <span class=\"number\">92</span>, <span class=\"number\">72</span>, <span class=\"number\">113</span>, <span class=\"number\">79</span>,\n    <span class=\"number\">34</span>, <span class=\"number\">24</span>, <span class=\"number\">15</span>, <span class=\"number\">37</span>, <span class=\"number\">173</span>, <span class=\"number\">131</span>, <span class=\"number\">101</span>, <span class=\"number\">181</span>, <span class=\"number\">63</span>, <span class=\"number\">151</span>, <span class=\"number\">121</span>, <span class=\"number\">247</span>, <span class=\"number\">157</span>, <span class=\"number\">196</span>, <span class=\"number\">163</span>, <span class=\"number\">215</span>, <span class=\"number\">233</span>, <span class=\"number\">57</span>, <span class=\"number\">99</span>,\n    <span class=\"number\">249</span>, <span class=\"number\">74</span>,\n];\n\n<span class=\"kw\">let </span>proof_result = MerkleProof::&lt;Sha256&gt;::try_from(proof_bytes.as_slice());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = Error</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<&[u8]>","sp_domains::merkle_tree::MerkleProof"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CVec%3Cu8%3E%3E-for-MerkleProof%3CT%3E\" class=\"impl\"><a href=\"#impl-TryFrom%3CVec%3Cu8%3E%3E-for-MerkleProof%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt; for MerkleProof&lt;T&gt;<div class=\"where\">where\n    T: Hasher,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;MerkleProof&lt;T&gt;, &lt;MerkleProof&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Parses proof serialized to a collection of bytes. Consumes passed vector.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::convert::TryFrom;\n<span class=\"kw\">use </span>rs_merkle::{MerkleProof, algorithms::Sha256};\n\n<span class=\"kw\">let </span>proof_bytes: Vec&lt;u8&gt; = <span class=\"macro\">vec!</span>[\n    <span class=\"number\">46</span>, <span class=\"number\">125</span>, <span class=\"number\">44</span>, <span class=\"number\">3</span>, <span class=\"number\">169</span>, <span class=\"number\">80</span>, <span class=\"number\">122</span>, <span class=\"number\">226</span>, <span class=\"number\">101</span>, <span class=\"number\">236</span>, <span class=\"number\">245</span>, <span class=\"number\">181</span>, <span class=\"number\">53</span>, <span class=\"number\">104</span>, <span class=\"number\">133</span>, <span class=\"number\">165</span>, <span class=\"number\">51</span>, <span class=\"number\">147</span>, <span class=\"number\">162</span>,\n    <span class=\"number\">2</span>, <span class=\"number\">157</span>, <span class=\"number\">36</span>, <span class=\"number\">19</span>, <span class=\"number\">148</span>, <span class=\"number\">153</span>, <span class=\"number\">114</span>, <span class=\"number\">101</span>, <span class=\"number\">161</span>, <span class=\"number\">162</span>, <span class=\"number\">90</span>, <span class=\"number\">239</span>, <span class=\"number\">198</span>, <span class=\"number\">37</span>, <span class=\"number\">47</span>, <span class=\"number\">16</span>, <span class=\"number\">200</span>, <span class=\"number\">54</span>, <span class=\"number\">16</span>,\n    <span class=\"number\">235</span>, <span class=\"number\">202</span>, <span class=\"number\">26</span>, <span class=\"number\">5</span>, <span class=\"number\">156</span>, <span class=\"number\">11</span>, <span class=\"number\">174</span>, <span class=\"number\">130</span>, <span class=\"number\">85</span>, <span class=\"number\">235</span>, <span class=\"number\">162</span>, <span class=\"number\">249</span>, <span class=\"number\">91</span>, <span class=\"number\">228</span>, <span class=\"number\">209</span>, <span class=\"number\">215</span>, <span class=\"number\">188</span>, <span class=\"number\">250</span>,\n    <span class=\"number\">137</span>, <span class=\"number\">215</span>, <span class=\"number\">36</span>, <span class=\"number\">138</span>, <span class=\"number\">130</span>, <span class=\"number\">217</span>, <span class=\"number\">241</span>, <span class=\"number\">17</span>, <span class=\"number\">229</span>, <span class=\"number\">160</span>, <span class=\"number\">31</span>, <span class=\"number\">238</span>, <span class=\"number\">20</span>, <span class=\"number\">224</span>, <span class=\"number\">237</span>, <span class=\"number\">92</span>, <span class=\"number\">72</span>, <span class=\"number\">113</span>, <span class=\"number\">79</span>,\n    <span class=\"number\">34</span>, <span class=\"number\">24</span>, <span class=\"number\">15</span>, <span class=\"number\">37</span>, <span class=\"number\">173</span>, <span class=\"number\">131</span>, <span class=\"number\">101</span>, <span class=\"number\">181</span>, <span class=\"number\">63</span>, <span class=\"number\">151</span>, <span class=\"number\">121</span>, <span class=\"number\">247</span>, <span class=\"number\">157</span>, <span class=\"number\">196</span>, <span class=\"number\">163</span>, <span class=\"number\">215</span>, <span class=\"number\">233</span>, <span class=\"number\">57</span>, <span class=\"number\">99</span>,\n    <span class=\"number\">249</span>, <span class=\"number\">74</span>,\n];\n\n<span class=\"kw\">let </span>proof_result = MerkleProof::&lt;Sha256&gt;::try_from(proof_bytes);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = Error</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<Vec<u8>>","sp_domains::merkle_tree::MerkleProof"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[55279]}