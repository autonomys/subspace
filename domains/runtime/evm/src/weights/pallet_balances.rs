
//! Autogenerated weights for `pallet_balances`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-09-30, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `protocol-team-testing`, CPU: `AMD Ryzen 5 3600 6-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/production/subspace-node
// domain
// benchmark
// pallet
// --runtime=./target/production/wbuild/evm-domain-runtime/evm_domain_runtime.compact.compressed.wasm
// --extrinsic=*
// --wasm-execution=compiled
// --genesis-builder=none
// --heap-pages=4096
// --steps=50
// --repeat=20
// --pallet=pallet_balances
// --output=./domains/runtime/evm/src/weights/pallet_balances.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_balances`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_balances::WeightInfo for WeightInfo<T> {
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `BlockFees::CollectedBlockFees` (r:1 w:1)
	/// Proof: `BlockFees::CollectedBlockFees` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::EventSegments` (r:0 w:1)
	/// Proof: `System::EventSegments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn transfer_allow_death() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 48_190_000 picoseconds.
		Weight::from_parts(48_679_000, 0)
			.saturating_add(Weight::from_parts(0, 3581))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `System::EventSegments` (r:0 w:1)
	/// Proof: `System::EventSegments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn transfer_keep_alive() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 37_510_000 picoseconds.
		Weight::from_parts(37_929_000, 0)
			.saturating_add(Weight::from_parts(0, 3581))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `System::EventSegments` (r:0 w:1)
	/// Proof: `System::EventSegments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_set_balance_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `51`
		//  Estimated: `3581`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_250_000, 0)
			.saturating_add(Weight::from_parts(0, 3581))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `System::EventSegments` (r:0 w:1)
	/// Proof: `System::EventSegments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_set_balance_killing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `51`
		//  Estimated: `3581`
		// Minimum execution time: 20_210_000 picoseconds.
		Weight::from_parts(20_689_000, 0)
			.saturating_add(Weight::from_parts(0, 3581))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `BlockFees::CollectedBlockFees` (r:1 w:1)
	/// Proof: `BlockFees::CollectedBlockFees` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::EventSegments` (r:0 w:1)
	/// Proof: `System::EventSegments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `51`
		//  Estimated: `6172`
		// Minimum execution time: 49_518_000 picoseconds.
		Weight::from_parts(50_239_000, 0)
			.saturating_add(Weight::from_parts(0, 6172))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `System::EventSegments` (r:0 w:1)
	/// Proof: `System::EventSegments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn transfer_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 46_209_000 picoseconds.
		Weight::from_parts(46_999_000, 0)
			.saturating_add(Weight::from_parts(0, 3581))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `System::EventSegments` (r:0 w:1)
	/// Proof: `System::EventSegments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_unreserve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `51`
		//  Estimated: `3581`
		// Minimum execution time: 15_370_000 picoseconds.
		Weight::from_parts(15_670_000, 0)
			.saturating_add(Weight::from_parts(0, 3581))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `System::Account` (r:999 w:999)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `System::EventSegments` (r:0 w:10)
	/// Proof: `System::EventSegments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `u` is `[1, 1000]`.
	fn upgrade_accounts(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + u * (124 ±0)`
		//  Estimated: `990 + u * (2591 ±0)`
		// Minimum execution time: 14_880_000 picoseconds.
		Weight::from_parts(15_140_000, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 11_256
			.saturating_add(Weight::from_parts(13_690_967, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(u.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(u.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(u.into()))
	}
	/// Storage: `System::EventSegments` (r:0 w:1)
	/// Proof: `System::EventSegments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_adjust_total_issuance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_869_000 picoseconds.
		Weight::from_parts(6_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BlockFees::CollectedBlockFees` (r:1 w:1)
	/// Proof: `BlockFees::CollectedBlockFees` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::EventSegments` (r:0 w:1)
	/// Proof: `System::EventSegments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn burn_allow_death() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 30_569_000 picoseconds.
		Weight::from_parts(31_209_000, 0)
			.saturating_add(Weight::from_parts(0, 1485))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `System::EventSegments` (r:0 w:1)
	/// Proof: `System::EventSegments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn burn_keep_alive() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 19_220_000 picoseconds.
		Weight::from_parts(19_440_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
