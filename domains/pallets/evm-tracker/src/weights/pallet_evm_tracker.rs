
//! Autogenerated weights for `pallet_evm_tracker`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-09-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `protocol-team-testing`, CPU: `AMD Ryzen 5 3600 6-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/production/subspace-node
// domain
// benchmark
// pallet
// --runtime=./target/production/wbuild/evm-domain-runtime/evm_domain_runtime.compact.compressed.wasm
// --extrinsic=*
// --wasm-execution=compiled
// --genesis-builder=none
// --heap-pages=4096
// --steps=50
// --repeat=20
// --pallet=pallet_evm_tracker
// --output=./domains/pallets/evm-tracker/src/weights/pallet_evm_tracker.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_evm_tracker`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
	/// Storage: `EVMNoncetracker::ContractCreationAllowedBy` (r:1 w:0)
	/// Proof: `EVMNoncetracker::ContractCreationAllowedBy` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 5000]`.
	fn evm_contract_check_multiple(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `209`
		//  Estimated: `1694`
		// Minimum execution time: 3_590_000 picoseconds.
		Weight::from_parts(4_981_862, 0)
			.saturating_add(Weight::from_parts(0, 1694))
			// Standard Error: 21
			.saturating_add(Weight::from_parts(7_236, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `EVMNoncetracker::ContractCreationAllowedBy` (r:1 w:0)
	/// Proof: `EVMNoncetracker::ContractCreationAllowedBy` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 1300]`.
	fn evm_contract_check_nested(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `209`
		//  Estimated: `1694`
		// Minimum execution time: 3_380_000 picoseconds.
		Weight::from_parts(3_453_515, 0)
			.saturating_add(Weight::from_parts(0, 1694))
			// Standard Error: 78
			.saturating_add(Weight::from_parts(91_486, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
}
